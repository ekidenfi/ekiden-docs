asyncapi: 3.0.0
info:
  title: Ekiden WebSocket API
  version: 1.0.0
  description: |
    Real-time feeds for orderbooks and aggregated trades.

    ### Flow
    1. Connect to `wss://api.ekiden.fi/ws`.
    2. Send a **Subscribe** request on the root channel `/` with a channel name:
       - `orderbook/{market_addr}`
       - `trades/{market_addr}`
    3. Receive **Subscribed**, then streaming events on the channel you subscribed to.
    4. Use **Unsubscribe** or **Ping** when needed.

servers:
  production:
    host: api.ekiden.fi
    protocol: wss
    description: Production WebSocket endpoint

channels:
  ws:
    title: WebSocket endpoint
    address: /ws
    messages:
      SubscribeRequest: { $ref: '#/components/messages/SubscribeRequest' }
      UnsubscribeRequest: { $ref: '#/components/messages/UnsubscribeRequest' }
      PingRequest: { $ref: '#/components/messages/PingRequest' }
      Subscribed: { $ref: '#/components/messages/Subscribed' }
      Unsubscribed: { $ref: '#/components/messages/Unsubscribed' }
      Pong: { $ref: '#/components/messages/Pong' }
      Error: { $ref: '#/components/messages/Error' }
      OrderbookSnapshotEvent: { $ref: '#/components/messages/OrderbookSnapshotEvent' }
      OrderbookDeltaEvent: { $ref: '#/components/messages/OrderbookDeltaEvent' }
      TradesEvent: { $ref: '#/components/messages/TradesEvent' }

operations:
  # Client -> Server
  sendSubscribe:   { action: receive, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/SubscribeRequest' } ] }
  sendUnsubscribe: { action: receive, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/UnsubscribeRequest' } ] }
  sendPing:        { action: receive, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/PingRequest' } ] }

  # Server -> Client
  receiveSubscribed:   { action: send, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/Subscribed' } ] }
  receiveUnsubscribed: { action: send, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/Unsubscribed' } ] }
  receivePong:         { action: send, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/Pong' } ] }
  receiveError:        { action: send, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/Error' } ] }
  receiveOrderbookSnapshot: { action: send, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/OrderbookSnapshotEvent' } ] }
  receiveOrderbookDelta:    { action: send, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/OrderbookDeltaEvent' } ] }
  receiveTrades:            { action: send, channel: { $ref: '#/channels/ws' }, messages: [ { $ref: '#/channels/ws/messages/TradesEvent' } ] }

components:
  messages:
    # Client -> Server
    SubscribeRequest:
      title: Subscribe
      payload:
        type: object
        additionalProperties: false
        properties:
          method:
            type: string
            enum: ['subscribe']
            default: 'subscribe'
            readOnly: true
          channel:
            type: string
            description: 'orderbook/{market_addr} or trades/{market_addr} market_addr like 0x88a70ff3860d559b5e2639538bc34a40d0b38beb9d97d1b6cff59289f8b350fd'
            pattern: '^(orderbook|trades)\/[^\/\s]+$'
            default: 'orderbook/'
        required: [method, channel]

    UnsubscribeRequest:
      title: Unsubscribe
      payload:
        type: object
        additionalProperties: false
        properties:
          method:
            type: string
            enum: ['unsubscribe']
            default: 'unsubscribe'
            readOnly: true
          channel:
            type: string
            description: 'Unsubscribe from events. Examples: orderbook/{market_addr} or trades/{market_addr} market_addr like 0x88a70ff3860d559b5e2639538bc34a40d0b38beb9d97d1b6cff59289f8b350fd'
            pattern: '^(orderbook|trades)\/[^\/\s]+$'
            default: 'orderbook/'
        required: [method, channel]

    PingRequest:
      title: Ping
      payload:
        type: object
        additionalProperties: false
        properties:
          method:
            type: string
            enum: ["ping"]
            default: "ping"
            readOnly: true
            description: Ensure the connection is alive
        required: [method]

    # Server -> Client acks
    Subscribed:
      title: Subscribed
      payload:
        type: object
        properties:
          type: { type: string, const: subscribed }
          channel: { type: string }
        required: [type, channel]

    Unsubscribed:
      title: Unsubscribed
      payload:
        type: object
        properties:
          type: { type: string, const: unsubscribed }
          channel: { type: string }
        required: [type, channel]

    Pong:
      title: Pong
      payload:
        type: object
        properties:
          type: { type: string, const: pong }
        required: [type]

    Error:
      title: Error
      payload:
        type: object
        properties:
          type: { type: string, const: error }
          message: { type: string }
        required: [type, message]

    # Server -> Client events (envelope carries logical channel)
    OrderbookSnapshotEvent:
      title: Orderbook Snapshot Event
      payload:
        type: object
        properties:
          type:    { type: string, const: event }
          channel: { type: string, description: 'orderbook/{market_addr}' }
          data:
            type: object
            properties:
              type: { type: string, const: orderbook_snapshot }
              payload: { $ref: '#/components/schemas/OrderbookSnapshot' }
            required: [type, payload]
        required: [type, channel, data]

    OrderbookDeltaEvent:
      title: Orderbook Delta Event
      payload:
        type: object
        properties:
          type:    { type: string, const: event }
          channel: { type: string, description: 'orderbook/{market_addr}' }
          data:
            type: object
            properties:
              type: { type: string, const: orderbook_delta }
              payload: { $ref: '#/components/schemas/OrderbookDelta' }
            required: [type, payload]
        required: [type, channel, data]

    TradesEvent:
      title: Trades Event
      payload:
        type: object
        properties:
          type:    { type: string, const: event }
          channel: { type: string, description: 'trades/{market_addr}' }
          data:
            type: object
            properties:
              type: { type: string, const: trades }
              payload: { $ref: '#/components/schemas/AggregatedTrades' }
            required: [type, payload]
        required: [type, channel, data]

  schemas:
    OrderbookSnapshot:
      type: object
      properties:
        market_addr: { type: string }
        seq: { type: integer, format: int64 }
        bids: { type: array, items: { $ref: '#/components/schemas/Level' } }
        asks: { type: array, items: { $ref: '#/components/schemas/Level' } }
        ts: { type: integer, format: int64 }
      additionalProperties: true

    OrderbookDelta:
      type: object
      properties:
        market_addr: { type: string }
        seq: { type: integer, format: int64 }
        bids_upserts: { type: array, items: { $ref: '#/components/schemas/Level' } }
        asks_upserts: { type: array, items: { $ref: '#/components/schemas/Level' } }
        bids_deletes: { type: array, items: { $ref: '#/components/schemas/PriceKey' } }
        asks_deletes: { type: array, items: { $ref: '#/components/schemas/PriceKey' } }
        ts: { type: integer, format: int64 }
      additionalProperties: true

    AggregatedTrades:
      type: object
      properties:
        market_addr: { type: string }
        trades: { type: array, items: { $ref: '#/components/schemas/Trade' } }
        ts: { type: integer, format: int64 }
      additionalProperties: true

    Level:
      type: object
      properties:
        price: { type: string }
        qty:   { type: string }
      required: [price, qty]

    PriceKey:
      type: object
      properties:
        price: { type: string }
      required: [price]

    Trade:
      type: object
      properties:
        side: { type: string, enum: [buy, sell] }
        price: { type: string }
        qty: { type: string }
        ts: { type: integer, format: int64 }
      required: [side, price, qty, ts]
